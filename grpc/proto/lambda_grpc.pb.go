// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LambdaClient is the client API for Lambda service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LambdaClient interface {
	GetIntData(ctx context.Context, in *TableOption, opts ...grpc.CallOption) (*IntRows, error)
	GetStringData(ctx context.Context, in *TableOption, opts ...grpc.CallOption) (*StringRows, error)
}

type lambdaClient struct {
	cc grpc.ClientConnInterface
}

func NewLambdaClient(cc grpc.ClientConnInterface) LambdaClient {
	return &lambdaClient{cc}
}

func (c *lambdaClient) GetIntData(ctx context.Context, in *TableOption, opts ...grpc.CallOption) (*IntRows, error) {
	out := new(IntRows)
	err := c.cc.Invoke(ctx, "/lambda.Lambda/GetIntData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lambdaClient) GetStringData(ctx context.Context, in *TableOption, opts ...grpc.CallOption) (*StringRows, error) {
	out := new(StringRows)
	err := c.cc.Invoke(ctx, "/lambda.Lambda/GetStringData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LambdaServer is the server API for Lambda service.
// All implementations should embed UnimplementedLambdaServer
// for forward compatibility
type LambdaServer interface {
	GetIntData(context.Context, *TableOption) (*IntRows, error)
	GetStringData(context.Context, *TableOption) (*StringRows, error)
}

// UnimplementedLambdaServer should be embedded to have forward compatible implementations.
type UnimplementedLambdaServer struct {
}

func (UnimplementedLambdaServer) GetIntData(context.Context, *TableOption) (*IntRows, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntData not implemented")
}
func (UnimplementedLambdaServer) GetStringData(context.Context, *TableOption) (*StringRows, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStringData not implemented")
}

// UnsafeLambdaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LambdaServer will
// result in compilation errors.
type UnsafeLambdaServer interface {
	mustEmbedUnimplementedLambdaServer()
}

func RegisterLambdaServer(s grpc.ServiceRegistrar, srv LambdaServer) {
	s.RegisterService(&Lambda_ServiceDesc, srv)
}

func _Lambda_GetIntData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LambdaServer).GetIntData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lambda.Lambda/GetIntData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LambdaServer).GetIntData(ctx, req.(*TableOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lambda_GetStringData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LambdaServer).GetStringData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lambda.Lambda/GetStringData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LambdaServer).GetStringData(ctx, req.(*TableOption))
	}
	return interceptor(ctx, in, info, handler)
}

// Lambda_ServiceDesc is the grpc.ServiceDesc for Lambda service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lambda_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lambda.Lambda",
	HandlerType: (*LambdaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIntData",
			Handler:    _Lambda_GetIntData_Handler,
		},
		{
			MethodName: "GetStringData",
			Handler:    _Lambda_GetStringData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lambda.proto",
}
