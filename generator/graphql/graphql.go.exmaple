package graph

import (
	"github.com/99designs/gqlgen/graphql/handler"
	"github.com/99designs/gqlgen/graphql/handler/transport"
	"github.com/99designs/gqlgen/graphql/playground"
	 lambdaPlayground "github.com/lambda-platform/lambda/graphql/playground"
	"github.com/gorilla/websocket"
	"github.com/gofiber/fiber/v2"
	"github.com/lambda-platform/lambda/graphql/gql"
	"PROJECTNAME/app/graph/generated"
	"net/http"
	"github.com/gofiber/fiber/v2"
	"time"
)

func Set(c *fiber.Ctx) {

	e.Use(gql.Process)
	graphqlHandler := handler.NewDefaultServer(generated.NewExecutableSchema(generated.Config{Resolvers: &Resolver{}}))
	playgroundHandler := playground.Handler("GraphQL playground", "/query")
	lambdaPlaygroundHandler := lambdaPlayground.Handler("GraphQL playground", "/query")

	graphqlHandler.AddTransport(transport.POST{})
	graphqlHandler.AddTransport(transport.Websocket{
		KeepAlivePingInterval: 10 * time.Second,
		Upgrader: websocket.Upgrader{
			CheckOrigin: func(r *http.Request) bool {
				return true
			},
		},
	})

	e.POST("/query", func(c echo.Context) error {
		cc := c.(*gql.CustomContext)
		req := cc.Request()
		res := cc.Response()
		graphqlHandler.ServeHTTP(res, req)
		return nil
	})

	e.GET("/play", func(c echo.Context) error {
		cc := c.(*gql.CustomContext)
		req := cc.Request()
		res := cc.Response()
		playgroundHandler.ServeHTTP(res, req)
		return nil
	})
	e.GET("/play-full", func(c echo.Context) error {
            cc := c.(*gql.CustomContext)
            req := cc.Request()
            res := cc.Response()
            lambdaPlaygroundHandler.ServeHTTP(res, req)
            return nil
    })
}

